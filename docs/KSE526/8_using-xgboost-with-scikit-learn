{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.6"},"colab":{"name":"8_using-xgboost-with-scikit-learn","provenance":[{"file_id":"1rbBjDwALki5FI2why5B_e_t-FH9p1m1R","timestamp":1600394427037}]}},"cells":[{"cell_type":"markdown","metadata":{"_uuid":"cdd204371f9f83d15616dab1a94370e1eba0d9b9","id":"RBhGLaxTv39O","colab_type":"text"},"source":["# XGBoost\n","\n","Exploring the use of XGBoost and its integration with Scikit-Learn."]},{"cell_type":"code","metadata":{"trusted":false,"_uuid":"4ab228c84471891201204c1c70c0e4535ff76db9","id":"yahaYy2uv39P","colab_type":"code","colab":{}},"source":["import numpy as np\n","\n","from scipy.stats import uniform, randint\n","\n","from sklearn.datasets import load_breast_cancer, load_diabetes, load_wine\n","from sklearn.metrics import auc, accuracy_score, confusion_matrix, mean_squared_error\n","from sklearn.model_selection import cross_val_score, GridSearchCV, KFold, RandomizedSearchCV, train_test_split\n","\n","import xgboost as xgb"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"trusted":false,"_uuid":"63f609040e124bf1ef3b7853daab97c6be268312","id":"gSmQk-4nv39S","colab_type":"code","colab":{}},"source":["def display_scores(scores):\n","    print(\"Scores: {0}\\nMean: {1:.3f}\\nStd: {2:.3f}\".format(scores, np.mean(scores), np.std(scores)))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"trusted":false,"_uuid":"6df117f0ea221d2a5fcc3232054d02757d50ec69","id":"6o1eiqMXv39V","colab_type":"code","colab":{}},"source":["def report_best_scores(results, n_top=3):\n","    for i in range(1, n_top + 1):\n","        candidates = np.flatnonzero(results['rank_test_score'] == i)\n","        for candidate in candidates:\n","            print(\"Model with rank: {0}\".format(i))\n","            print(\"Mean validation score: {0:.3f} (std: {1:.3f})\".format(\n","                  results['mean_test_score'][candidate],\n","                  results['std_test_score'][candidate]))\n","            print(\"Parameters: {0}\".format(results['params'][candidate]))\n","            print(\"\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"_uuid":"37811e5665f546205a98f9d7f77375fce4a1d9b9","id":"Y5DDT8b2v39X","colab_type":"text"},"source":["## Regression"]},{"cell_type":"code","metadata":{"trusted":false,"_uuid":"e35bb62d5ea4622413443ff43d578e7b2893c309","id":"J6OEuLKov39Y","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1599547172214,"user_tz":-540,"elapsed":1703,"user":{"displayName":"Jae-Gil Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhUwG08Ejy7eYH5nb61w-F-kiQoQfpLzAbZOFsJyg=s64","userId":"10885684275648248195"}},"outputId":"193a4883-edda-4c81-d333-1f67d9353562"},"source":["diabetes = load_diabetes()\n","\n","X = diabetes.data\n","y = diabetes.target\n","\n","xgb_model = xgb.XGBRegressor(objective=\"reg:squarederror\", random_state=42)\n","\n","xgb_model.fit(X, y)\n","\n","y_pred = xgb_model.predict(X)\n","\n","mse=mean_squared_error(y, y_pred)\n","\n","print(np.sqrt(mse))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["36.271203581682585\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"trusted":false,"_uuid":"ab77663f37ec14488dbf542dc18d119ef726d2f8","id":"B-oul8R7v39a","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":140},"executionInfo":{"status":"ok","timestamp":1599547172216,"user_tz":-540,"elapsed":1691,"user":{"displayName":"Jae-Gil Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhUwG08Ejy7eYH5nb61w-F-kiQoQfpLzAbZOFsJyg=s64","userId":"10885684275648248195"}},"outputId":"180ed9e0-b4f0-49dc-9848-b0ba62180ae7"},"source":["xgb_model"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n","             colsample_bynode=1, colsample_bytree=1, gamma=0,\n","             importance_type='gain', learning_rate=0.1, max_delta_step=0,\n","             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,\n","             n_jobs=1, nthread=None, objective='reg:squarederror',\n","             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,\n","             seed=None, silent=None, subsample=1, verbosity=1)"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"markdown","metadata":{"_uuid":"3e675a3449f6d7f6fabd8b634195fde22c2cd670","id":"BtQSYXviv39c","colab_type":"text"},"source":["## Binary classification"]},{"cell_type":"code","metadata":{"trusted":false,"_uuid":"21eee83d9068275fac549b80394d399b97edd2c5","id":"q2d4vOgnv39d","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":52},"executionInfo":{"status":"ok","timestamp":1599547172219,"user_tz":-540,"elapsed":1681,"user":{"displayName":"Jae-Gil Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhUwG08Ejy7eYH5nb61w-F-kiQoQfpLzAbZOFsJyg=s64","userId":"10885684275648248195"}},"outputId":"f8380f49-fbfb-4562-cf3e-a660fe60cd1a"},"source":["cancer = load_breast_cancer()\n","\n","X = cancer.data\n","y = cancer.target\n","\n","xgb_model = xgb.XGBClassifier(objective=\"binary:logistic\", random_state=42)\n","xgb_model.fit(X, y)\n","\n","y_pred = xgb_model.predict(X)\n","\n","print(confusion_matrix(y, y_pred))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[212   0]\n"," [  0 357]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"_uuid":"1bb24203c37935875a7628974d8748e4386aae80","id":"h2JdeeXzv39f","colab_type":"text"},"source":["## Multiclass classification"]},{"cell_type":"code","metadata":{"trusted":false,"_uuid":"84869c7bcb30f512af78b94ea768aa022264038d","id":"iQkexNNfv39g","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":70},"executionInfo":{"status":"ok","timestamp":1599547172220,"user_tz":-540,"elapsed":1669,"user":{"displayName":"Jae-Gil Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhUwG08Ejy7eYH5nb61w-F-kiQoQfpLzAbZOFsJyg=s64","userId":"10885684275648248195"}},"outputId":"24798f35-46dc-428c-f7a7-1f5885066165"},"source":["wine = load_wine()\n","\n","X = wine.data\n","y = wine.target\n","\n","xgb_model = xgb.XGBClassifier(objective=\"multi:softprob\", random_state=42)\n","xgb_model.fit(X, y)\n","\n","y_pred = xgb_model.predict(X)\n","\n","print(confusion_matrix(y, y_pred))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[59  0  0]\n"," [ 0 71  0]\n"," [ 0  0 48]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"_uuid":"e79c504b5e909694f049100483d957f8f3b83bb7","id":"Bj5tZWfBv39i","colab_type":"text"},"source":["## Cross validation\n","\n","Cross-validation using `KFold`"]},{"cell_type":"code","metadata":{"trusted":false,"_uuid":"c55ecf8bcfbad2d6f2cfa90ea6f3e594323128d4","id":"F9Z8zv8tv39j","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":70},"executionInfo":{"status":"ok","timestamp":1599547172675,"user_tz":-540,"elapsed":2114,"user":{"displayName":"Jae-Gil Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhUwG08Ejy7eYH5nb61w-F-kiQoQfpLzAbZOFsJyg=s64","userId":"10885684275648248195"}},"outputId":"ff52b64a-5a5e-4594-945b-1aa4bf4aec1a"},"source":["diabetes = load_diabetes()\n","\n","X = diabetes.data\n","y = diabetes.target\n","\n","kfold = KFold(n_splits=5, shuffle=True, random_state=42)\n","\n","scores = []\n","\n","for train_index, test_index in kfold.split(X):   \n","    X_train, X_test = X[train_index], X[test_index]\n","    y_train, y_test = y[train_index], y[test_index]\n","\n","    xgb_model = xgb.XGBRegressor(objective=\"reg:squarederror\")\n","    xgb_model.fit(X_train, y_train)\n","    \n","    y_pred = xgb_model.predict(X_test)\n","    \n","    scores.append(mean_squared_error(y_test, y_pred))\n","    \n","display_scores(np.sqrt(scores))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Scores: [55.30444573 55.59151472 63.44642064 57.82986083 58.71808276]\n","Mean: 58.178\n","Std: 2.937\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"_uuid":"352a19638053ea9e7e5993c324169e08d87c7434","id":"OS6YS0ydv39l","colab_type":"text"},"source":["Cross-validation using `cross_val_score`"]},{"cell_type":"code","metadata":{"trusted":false,"_uuid":"3aa271d172e729ea57b5c229f9ca60d49ffe7c46","id":"dHD2tD3vv39n","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":70},"executionInfo":{"status":"ok","timestamp":1599547172676,"user_tz":-540,"elapsed":2102,"user":{"displayName":"Jae-Gil Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhUwG08Ejy7eYH5nb61w-F-kiQoQfpLzAbZOFsJyg=s64","userId":"10885684275648248195"}},"outputId":"64030a85-29b9-47e6-c5a5-1ad6080de754"},"source":["xgb_model = xgb.XGBRegressor(objective=\"reg:squarederror\", random_state=42)\n","\n","scores = cross_val_score(xgb_model, X, y, scoring=\"neg_mean_squared_error\", cv=5)\n","\n","display_scores(np.sqrt(-scores))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Scores: [56.04057166 56.14039793 60.3213523  59.67532995 60.7722925 ]\n","Mean: 58.590\n","Std: 2.071\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"_uuid":"b3830b4750c56d1cdd2e11529998dd36a05b2809","id":"GkajJuU6v39p","colab_type":"text"},"source":["## Hyperparameter searching"]},{"cell_type":"code","metadata":{"trusted":false,"_uuid":"170c2d75670a537b2c06a59b4d31db380c811bb0","id":"2_7sf49Nv39q","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":140},"executionInfo":{"status":"ok","timestamp":1599547199391,"user_tz":-540,"elapsed":28801,"user":{"displayName":"Jae-Gil Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhUwG08Ejy7eYH5nb61w-F-kiQoQfpLzAbZOFsJyg=s64","userId":"10885684275648248195"}},"outputId":"32d62b38-99a6-4a4c-b5dd-c8f375ce0c1c"},"source":["diabetes = load_diabetes()\n","\n","X = diabetes.data\n","y = diabetes.target\n","\n","xgb_model = xgb.XGBRegressor(objective=\"reg:squarederror\")\n","\n","params = {\n","    \"colsample_bytree\": uniform(0.7, 0.3),\n","    \"gamma\": uniform(0, 0.5),\n","    \"learning_rate\": uniform(0.03, 0.3), # default 0.1 \n","    \"max_depth\": randint(2, 6), # default 3\n","    \"n_estimators\": randint(100, 150), # default 100\n","    \"subsample\": uniform(0.6, 0.4)\n","}\n","\n","search = RandomizedSearchCV(xgb_model, param_distributions=params, random_state=42, n_iter=200, cv=3, verbose=1, n_jobs=1, return_train_score=True)\n","\n","search.fit(X, y)\n","\n","report_best_scores(search.cv_results_, 1)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Fitting 3 folds for each of 200 candidates, totalling 600 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"],"name":"stderr"},{"output_type":"stream","text":["Model with rank: 1\n","Mean validation score: 0.472 (std: 0.012)\n","Parameters: {'colsample_bytree': 0.7516959613604889, 'gamma': 0.09614450940433539, 'learning_rate': 0.042260584879943656, 'max_depth': 2, 'n_estimators': 117, 'subsample': 0.7114361356127834}\n","\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=1)]: Done 600 out of 600 | elapsed:   26.3s finished\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"_uuid":"2aca70720de8182d89f49da579201263e184719c","id":"07b4Gmgov39s","colab_type":"text"},"source":["## Early stopping"]},{"cell_type":"markdown","metadata":{"_uuid":"3d9ab8c42539d972bd731209cc3afc97cb761573","id":"nGQlmTi2v39s","colab_type":"text"},"source":["The number of boosted trees (`n_estimators`) to train is uncapped, rather training continues until validation has not improved in *n* rounds"]},{"cell_type":"code","metadata":{"trusted":false,"_uuid":"8151b8c5e80194c5b3b68b9ccf6b76ab57e6ae73","id":"IRnjtK5Xv39t","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":316},"executionInfo":{"status":"ok","timestamp":1599547199392,"user_tz":-540,"elapsed":28775,"user":{"displayName":"Jae-Gil Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhUwG08Ejy7eYH5nb61w-F-kiQoQfpLzAbZOFsJyg=s64","userId":"10885684275648248195"}},"outputId":"444a9f75-483a-4f0e-e485-74ae1629440f"},"source":["cancer = load_breast_cancer()\n","\n","X = cancer.data\n","y = cancer.target\n","\n","# if more than one evaluation metric are given the last one is used for early stopping\n","xgb_model = xgb.XGBClassifier(objective=\"binary:logistic\", random_state=42, eval_metric=\"auc\")\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)\n","\n","xgb_model.fit(X_train, y_train, early_stopping_rounds=5, eval_set=[(X_test, y_test)])\n","\n","y_pred = xgb_model.predict(X_test)\n","\n","accuracy_score(y_test, y_pred)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[0]\tvalidation_0-auc:0.964315\n","Will train until validation_0-auc hasn't improved in 5 rounds.\n","[1]\tvalidation_0-auc:0.970662\n","[2]\tvalidation_0-auc:0.976176\n","[3]\tvalidation_0-auc:0.976176\n","[4]\tvalidation_0-auc:0.977216\n","[5]\tvalidation_0-auc:0.977008\n","[6]\tvalidation_0-auc:0.97732\n","[7]\tvalidation_0-auc:0.97732\n","[8]\tvalidation_0-auc:0.973575\n","[9]\tvalidation_0-auc:0.973575\n","[10]\tvalidation_0-auc:0.973575\n","[11]\tvalidation_0-auc:0.973575\n","Stopping. Best iteration:\n","[6]\tvalidation_0-auc:0.97732\n","\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["0.958041958041958"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"markdown","metadata":{"_uuid":"24fc1730d1f767fd4f8134a9e781d223bcd53b8f","id":"SlpAeryHv39v","colab_type":"text"},"source":["`xgb_model.fit()` will produce a model from the last iteration, not the best one, so to get the optimum model consider retraining over `xgb_model.best_iteration` rounds."]},{"cell_type":"code","metadata":{"trusted":false,"_uuid":"1e36599acc5b51f34822bad84a18078502479d4c","id":"maOFNgxgv39v","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1599547199393,"user_tz":-540,"elapsed":28759,"user":{"displayName":"Jae-Gil Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhUwG08Ejy7eYH5nb61w-F-kiQoQfpLzAbZOFsJyg=s64","userId":"10885684275648248195"}},"outputId":"9142365a-d72b-4b2e-d00c-e4e39faf377b"},"source":["print(\"best score: {0}, best iteration: {1}, best ntree limit {2}\".format(xgb_model.best_score, xgb_model.best_iteration, xgb_model.best_ntree_limit))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["best score: 0.97732, best iteration: 6, best ntree limit 7\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"_uuid":"3dabdc10ad4747247a347c5e6bf50d0b3072a954","id":"zKHgfseAv39x","colab_type":"text"},"source":["## Evaluations"]},{"cell_type":"code","metadata":{"trusted":false,"_uuid":"77d78fc754fdbdcef1e78713bdb44937c0224474","id":"YOJ3NSqcv39y","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":369},"executionInfo":{"status":"ok","timestamp":1599547199393,"user_tz":-540,"elapsed":28740,"user":{"displayName":"Jae-Gil Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhUwG08Ejy7eYH5nb61w-F-kiQoQfpLzAbZOFsJyg=s64","userId":"10885684275648248195"}},"outputId":"23608ed0-79f6-4965-90dd-fe443e921986"},"source":["cancer = load_breast_cancer()\n","\n","X = cancer.data\n","y = cancer.target\n","\n","xgb_model = xgb.XGBClassifier(objective=\"binary:logistic\", n_estimators=20, random_state=42, eval_metric=[\"auc\", \"error\", \"error@0.6\"])\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)\n","\n","xgb_model.fit(X_train, y_train, eval_set=[(X_test, y_test)])\n","\n","y_pred = xgb_model.predict(X_test)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[0]\tvalidation_0-auc:0.964315\tvalidation_0-error:0.048951\tvalidation_0-error@0.6:0.622378\n","[1]\tvalidation_0-auc:0.970662\tvalidation_0-error:0.048951\tvalidation_0-error@0.6:0.622378\n","[2]\tvalidation_0-auc:0.976176\tvalidation_0-error:0.041958\tvalidation_0-error@0.6:0.104895\n","[3]\tvalidation_0-auc:0.976176\tvalidation_0-error:0.041958\tvalidation_0-error@0.6:0.076923\n","[4]\tvalidation_0-auc:0.977216\tvalidation_0-error:0.041958\tvalidation_0-error@0.6:0.062937\n","[5]\tvalidation_0-auc:0.977008\tvalidation_0-error:0.041958\tvalidation_0-error@0.6:0.062937\n","[6]\tvalidation_0-auc:0.97732\tvalidation_0-error:0.041958\tvalidation_0-error@0.6:0.055944\n","[7]\tvalidation_0-auc:0.97732\tvalidation_0-error:0.048951\tvalidation_0-error@0.6:0.048951\n","[8]\tvalidation_0-auc:0.973575\tvalidation_0-error:0.048951\tvalidation_0-error@0.6:0.048951\n","[9]\tvalidation_0-auc:0.973575\tvalidation_0-error:0.048951\tvalidation_0-error@0.6:0.048951\n","[10]\tvalidation_0-auc:0.973575\tvalidation_0-error:0.048951\tvalidation_0-error@0.6:0.048951\n","[11]\tvalidation_0-auc:0.973575\tvalidation_0-error:0.048951\tvalidation_0-error@0.6:0.048951\n","[12]\tvalidation_0-auc:0.973575\tvalidation_0-error:0.041958\tvalidation_0-error@0.6:0.048951\n","[13]\tvalidation_0-auc:0.979089\tvalidation_0-error:0.041958\tvalidation_0-error@0.6:0.048951\n","[14]\tvalidation_0-auc:0.978777\tvalidation_0-error:0.041958\tvalidation_0-error@0.6:0.048951\n","[15]\tvalidation_0-auc:0.986059\tvalidation_0-error:0.041958\tvalidation_0-error@0.6:0.041958\n","[16]\tvalidation_0-auc:0.98866\tvalidation_0-error:0.034965\tvalidation_0-error@0.6:0.048951\n","[17]\tvalidation_0-auc:0.989284\tvalidation_0-error:0.034965\tvalidation_0-error@0.6:0.041958\n","[18]\tvalidation_0-auc:0.989284\tvalidation_0-error:0.034965\tvalidation_0-error@0.6:0.041958\n","[19]\tvalidation_0-auc:0.991261\tvalidation_0-error:0.034965\tvalidation_0-error@0.6:0.041958\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"_uuid":"1184be0ab9ca5995f68be62b4c3656e4e831a8f2","id":"pCdW1DNzv390","colab_type":"text"},"source":["## Plotting"]},{"cell_type":"code","metadata":{"trusted":false,"_uuid":"900a1c9d1c993f789ec11c7db1bbfbc380daea04","id":"WSK2fatVv391","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":704},"executionInfo":{"status":"ok","timestamp":1599547199904,"user_tz":-540,"elapsed":29238,"user":{"displayName":"Jae-Gil Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhUwG08Ejy7eYH5nb61w-F-kiQoQfpLzAbZOFsJyg=s64","userId":"10885684275648248195"}},"outputId":"1a001a8e-5ff8-41bb-98cc-bf4a6c939b42"},"source":["# requires graphviz and python-graphviz conda packages\n","import graphviz\n","\n","cancer = load_breast_cancer()\n","\n","X = cancer.data\n","y = cancer.target\n","\n","xgb_model = xgb.XGBClassifier(objective=\"binary:logistic\", random_state=42, eval_metric=\"auc\")\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)\n","\n","xgb_model.fit(X_train, y_train, early_stopping_rounds=10, eval_set=[(X_test, y_test)], verbose=False)\n","\n","xgb.plot_importance(xgb_model)\n","\n","# plot the output tree via matplotlib, specifying the ordinal number of the target tree\n","# xgb.plot_tree(xgb_model, num_trees=xgb_model.best_iteration)\n","\n","# converts the target tree to a graphviz instance\n","xgb.to_graphviz(xgb_model, num_trees=xgb_model.best_iteration)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<graphviz.dot.Digraph at 0x7f1bffa63cf8>"],"image/svg+xml":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.40.1 (20161225.0304)\n -->\n<!-- Title: %3 Pages: 1 -->\n<svg width=\"728pt\" height=\"305pt\"\n viewBox=\"0.00 0.00 727.99 305.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 301)\">\n<title>%3</title>\n<polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-301 723.985,-301 723.985,4 -4,4\"/>\n<!-- 0 -->\n<g id=\"node1\" class=\"node\">\n<title>0</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"358.5928\" cy=\"-279\" rx=\"79.8859\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"358.5928\" y=\"-275.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">f26&lt;0.208200008</text>\n</g>\n<!-- 1 -->\n<g id=\"node2\" class=\"node\">\n<title>1</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"267.5928\" cy=\"-192\" rx=\"75.2868\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"267.5928\" y=\"-188.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">f13&lt;42.8250008</text>\n</g>\n<!-- 0&#45;&gt;1 -->\n<g id=\"edge1\" class=\"edge\">\n<title>0&#45;&gt;1</title>\n<path fill=\"none\" stroke=\"#0000ff\" d=\"M340.1776,-261.3943C326.7331,-248.5407 308.328,-230.9446 293.4157,-216.6878\"/>\n<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"295.6275,-213.9602 285.9807,-209.5796 290.7902,-219.0199 295.6275,-213.9602\"/>\n<text text-anchor=\"middle\" x=\"354.0928\" y=\"-231.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">yes, missing</text>\n</g>\n<!-- 2 -->\n<g id=\"node3\" class=\"node\">\n<title>2</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"449.5928\" cy=\"-192\" rx=\"75.2868\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"449.5928\" y=\"-188.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">f23&lt;953.700012</text>\n</g>\n<!-- 0&#45;&gt;2 -->\n<g id=\"edge2\" class=\"edge\">\n<title>0&#45;&gt;2</title>\n<path fill=\"none\" stroke=\"#ff0000\" d=\"M377.0081,-261.3943C390.4526,-248.5407 408.8577,-230.9446 423.77,-216.6878\"/>\n<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"426.3955,-219.0199 431.205,-209.5796 421.5582,-213.9602 426.3955,-219.0199\"/>\n<text text-anchor=\"middle\" x=\"417.5928\" y=\"-231.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">no</text>\n</g>\n<!-- 3 -->\n<g id=\"node4\" class=\"node\">\n<title>3</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"80.5928\" cy=\"-105\" rx=\"80.6858\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"80.5928\" y=\"-101.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">leaf=0.090577662</text>\n</g>\n<!-- 1&#45;&gt;3 -->\n<g id=\"edge3\" class=\"edge\">\n<title>1&#45;&gt;3</title>\n<path fill=\"none\" stroke=\"#0000ff\" d=\"M232.8578,-175.8399C202.4797,-161.7067 158.1836,-141.0984 125.1918,-125.7492\"/>\n<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"126.3196,-122.4137 115.7764,-121.3688 123.3668,-128.7605 126.3196,-122.4137\"/>\n<text text-anchor=\"middle\" x=\"221.0928\" y=\"-144.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">yes, missing</text>\n</g>\n<!-- 4 -->\n<g id=\"node5\" class=\"node\">\n<title>4</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"267.5928\" cy=\"-105\" rx=\"88.2844\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"267.5928\" y=\"-101.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">leaf=&#45;0.0125452532</text>\n</g>\n<!-- 1&#45;&gt;4 -->\n<g id=\"edge4\" class=\"edge\">\n<title>1&#45;&gt;4</title>\n<path fill=\"none\" stroke=\"#ff0000\" d=\"M267.5928,-173.9735C267.5928,-162.1918 267.5928,-146.5607 267.5928,-133.1581\"/>\n<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"271.0929,-133.0033 267.5928,-123.0034 264.0929,-133.0034 271.0929,-133.0033\"/>\n<text text-anchor=\"middle\" x=\"275.5928\" y=\"-144.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">no</text>\n</g>\n<!-- 5 -->\n<g id=\"node6\" class=\"node\">\n<title>5</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"449.5928\" cy=\"-105\" rx=\"75.2868\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"449.5928\" y=\"-101.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">f21&lt;27.4300003</text>\n</g>\n<!-- 2&#45;&gt;5 -->\n<g id=\"edge5\" class=\"edge\">\n<title>2&#45;&gt;5</title>\n<path fill=\"none\" stroke=\"#0000ff\" d=\"M449.5928,-173.9735C449.5928,-162.1918 449.5928,-146.5607 449.5928,-133.1581\"/>\n<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"453.0929,-133.0033 449.5928,-123.0034 446.0929,-133.0034 453.0929,-133.0033\"/>\n<text text-anchor=\"middle\" x=\"485.0928\" y=\"-144.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">yes, missing</text>\n</g>\n<!-- 6 -->\n<g id=\"node7\" class=\"node\">\n<title>6</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"631.5928\" cy=\"-105\" rx=\"88.2844\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"631.5928\" y=\"-101.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">leaf=&#45;0.0867691636</text>\n</g>\n<!-- 2&#45;&gt;6 -->\n<g id=\"edge6\" class=\"edge\">\n<title>2&#45;&gt;6</title>\n<path fill=\"none\" stroke=\"#ff0000\" d=\"M483.3991,-175.8399C512.7779,-161.7961 555.5316,-141.359 587.5754,-126.0413\"/>\n<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"589.2158,-129.1365 596.7285,-121.6659 586.1968,-122.821 589.2158,-129.1365\"/>\n<text text-anchor=\"middle\" x=\"559.5928\" y=\"-144.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">no</text>\n</g>\n<!-- 7 -->\n<g id=\"node8\" class=\"node\">\n<title>7</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"353.5928\" cy=\"-18\" rx=\"85.2851\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"353.5928\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">leaf=0.0644017607</text>\n</g>\n<!-- 5&#45;&gt;7 -->\n<g id=\"edge7\" class=\"edge\">\n<title>5&#45;&gt;7</title>\n<path fill=\"none\" stroke=\"#0000ff\" d=\"M430.1658,-87.3943C415.8524,-74.4228 396.2095,-56.6213 380.4025,-42.2962\"/>\n<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"382.7512,-39.7013 372.991,-35.5796 378.0506,-44.8883 382.7512,-39.7013\"/>\n<text text-anchor=\"middle\" x=\"443.0928\" y=\"-57.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">yes, missing</text>\n</g>\n<!-- 8 -->\n<g id=\"node9\" class=\"node\">\n<title>8</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"545.5928\" cy=\"-18\" rx=\"88.2844\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"545.5928\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">leaf=&#45;0.0561203919</text>\n</g>\n<!-- 5&#45;&gt;8 -->\n<g id=\"edge8\" class=\"edge\">\n<title>5&#45;&gt;8</title>\n<path fill=\"none\" stroke=\"#ff0000\" d=\"M469.0199,-87.3943C483.3333,-74.4228 502.9762,-56.6213 518.7832,-42.2962\"/>\n<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"521.1351,-44.8883 526.1947,-35.5796 516.4345,-39.7013 521.1351,-44.8883\"/>\n<text text-anchor=\"middle\" x=\"511.5928\" y=\"-57.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">no</text>\n</g>\n</g>\n</svg>\n"},"metadata":{"tags":[]},"execution_count":14},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]}]}